{
	"info": {
		"_postman_id": "e1c9747d-bb7e-463b-afd8-d12c6eb1d572",
		"name": "Mini_assignment_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"id\", \"40\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//validation status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Api response time is lessThan 400\",()=>{\r",
							"    const expectedtime=400\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedtime);\r",
							"}\r",
							");\r",
							"pm.test(\"a.\tUser with 'id' 40 has 'userId'=4\",()=>{\r",
							"    const response=pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"userId\",4);\r",
							"\r",
							"}\r",
							");\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The HTTP code is 200\" , () => {\r",
							"    pm.response.to.have.status(200);  \r",
							"})\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"The response time is less than 400\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400,`Response time is : ${pm.response.responseTime}`)\r",
							"})\r",
							"pm.test(\"Updated successfully\", () => {\r",
							"    pm.expect(pm.response.name === \"Arun\" && pm.response.job === \"Manager\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The HTTP code is 200\" , () => {\r",
							"    pm.response.to.have.status(200);  \r",
							"})\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"The response time is less than 400\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400,`Response time is : ${pm.response.responseTime}`)\r",
							"})\r",
							"pm.test(\"Deleted Successfully\", () => {\r",
							"    pm.expect(!(pm.response === null))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"name\", pm.iterationData.get(\"name\"))\r",
							"pm.collectionVariables.set(\"job\", pm.iterationData.get(\"job\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The HTTP code is 201\" , () => {\r",
							"    pm.response.to.have.status(201);  \r",
							"})\r",
							"pm.test('Response has a valid Content-Type header', function() {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"The response time is less than 400\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400,`Response time is : ${pm.response.responseTime}`)\r",
							"})\r",
							" \r",
							"pm.test(\"Added successfully.\", () => {\r",
							"    pm.expect(pm.response.name === \"{{name}}\" && pm.response.job == \"{{job}}\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"job\":\"{{job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "job",
			"value": "",
			"type": "string"
		}
	]
}